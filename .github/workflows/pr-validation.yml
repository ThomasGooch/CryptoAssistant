name: PR Validation

on:
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened, ready_for_review]

jobs:
  pr-checks:
    name: PR Quality Checks
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Check PR title format
      run: |
        PR_TITLE="${{ github.event.pull_request.title }}"
        echo "PR Title: $PR_TITLE"
        
        # Check if title follows conventional commits format
        if echo "$PR_TITLE" | grep -E "^(feat|fix|docs|style|refactor|perf|test|chore|ci)(\(.+\))?: .+"; then
          echo "‚úÖ PR title follows conventional commits format"
        else
          echo "‚ùå PR title should follow conventional commits format"
          echo "Examples: feat: add new feature, fix: resolve bug, docs: update readme"
          exit 1
        fi
        
    - name: Check for sensitive files
      run: |
        echo "Checking for sensitive files..."
        SENSITIVE_FILES=""
        
        # Check for credential files
        if git diff --name-only origin/main HEAD | grep -E "(credentials|secrets|\.env|\.key|\.pem)"; then
          SENSITIVE_FILES="$SENSITIVE_FILES credential/secret files,"
        fi
        
        # Check for large files (>10MB)
        while IFS= read -r file; do
          if [[ -f "$file" ]] && [[ $(stat -f%z "$file" 2>/dev/null || stat -c%s "$file" 2>/dev/null) -gt 10485760 ]]; then
            SENSITIVE_FILES="$SENSITIVE_FILES large files (>10MB),"
          fi
        done < <(git diff --name-only origin/main HEAD)
        
        if [[ -n "$SENSITIVE_FILES" ]]; then
          echo "‚ùå Found potentially sensitive files: $SENSITIVE_FILES"
          echo "Please remove or use .gitignore"
          exit 1
        fi
        
        echo "‚úÖ No sensitive files detected"
        
    - name: Check branch protection
      run: |
        BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
        echo "Source branch: $BRANCH_NAME"
        
        # Prevent direct pushes to main
        if [[ "$BRANCH_NAME" == "main" ]]; then
          echo "‚ùå Direct pushes to main branch are not allowed"
          exit 1
        fi
        
        echo "‚úÖ Branch protection check passed"

  lint-and-format:
    name: Code Quality
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: 'client/package-lock.json'
        
    - name: Restore .NET dependencies
      run: dotnet restore
      
    - name: Install frontend dependencies
      working-directory: ./client
      run: npm ci
      
    - name: .NET Code formatting check
      run: |
        dotnet format --verbosity diagnostic --verify-no-changes
        if [[ $? -ne 0 ]]; then
          echo "‚ùå .NET code formatting issues found"
          echo "Run 'dotnet format' to fix formatting"
          exit 1
        fi
        echo "‚úÖ .NET code formatting is correct"
        
    - name: Frontend linting
      working-directory: ./client
      run: |
        npm run lint
        if [[ $? -ne 0 ]]; then
          echo "‚ùå Frontend linting issues found"
          exit 1
        fi
        echo "‚úÖ Frontend linting passed"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run .NET security audit
      run: |
        dotnet list package --vulnerable --include-transitive 2>&1 | tee audit.log
        if grep -q "has the following vulnerable packages" audit.log; then
          echo "‚ùå Vulnerable .NET packages found"
          cat audit.log
          exit 1
        fi
        echo "‚úÖ No vulnerable .NET packages found"
        
    - name: Setup Node.js for security scan
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: 'client/package-lock.json'
        
    - name: Install frontend dependencies
      working-directory: ./client
      run: npm ci
      
    - name: Run npm security audit
      working-directory: ./client
      run: |
        npm audit --audit-level=high
        if [[ $? -ne 0 ]]; then
          echo "‚ùå High/critical vulnerabilities found in frontend dependencies"
          exit 1
        fi
        echo "‚úÖ No high/critical vulnerabilities found"

  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: 'client/package-lock.json'
        
    - name: Build and test backend
      run: |
        echo "Building .NET solution..."
        dotnet restore
        dotnet build --configuration Release --no-restore
        
        echo "Running .NET tests..."
        dotnet test --configuration Release --no-build --verbosity normal
        
    - name: Build and test frontend
      working-directory: ./client
      run: |
        echo "Installing frontend dependencies..."
        npm ci
        
        echo "Building React app..."
        npm run build
        
        echo "Running frontend tests..."
        npm run test -- --run

  pr-summary:
    name: PR Summary
    runs-on: ubuntu-latest
    needs: [pr-checks, lint-and-format, security-scan, build-and-test]
    if: always() && github.event.pull_request.draft == false
    
    steps:
    - name: Generate PR summary comment
      uses: actions/github-script@v7
      with:
        script: |
          const { owner, repo } = context.repo;
          const issue_number = context.issue.number;
          
          const prChecks = '${{ needs.pr-checks.result }}';
          const lintFormat = '${{ needs.lint-and-format.result }}';
          const security = '${{ needs.security-scan.result }}';
          const buildTest = '${{ needs.build-and-test.result }}';
          
          const getEmoji = (result) => result === 'success' ? '‚úÖ' : result === 'failure' ? '‚ùå' : '‚è≠Ô∏è';
          
          const body = `## PR Validation Results üîç
          
          ${getEmoji(prChecks)} **PR Quality Checks**: ${prChecks}
          ${getEmoji(lintFormat)} **Code Quality (Lint/Format)**: ${lintFormat}  
          ${getEmoji(security)} **Security Scan**: ${security}
          ${getEmoji(buildTest)} **Build & Test**: ${buildTest}
          
          ---
          
          ${prChecks === 'success' && lintFormat === 'success' && security === 'success' && buildTest === 'success'
            ? 'üéâ **All validations passed!** This PR is ready for review and merge.'
            : '‚ö†Ô∏è **Some validations failed.** Please address the issues above before merging.'}
            
          <details>
          <summary>üìã Merge Checklist</summary>
          
          - [${prChecks === 'success' ? 'x' : ' '}] PR title follows conventional commits
          - [${prChecks === 'success' ? 'x' : ' '}] No sensitive files included
          - [${lintFormat === 'success' ? 'x' : ' '}] Code formatting is correct
          - [${lintFormat === 'success' ? 'x' : ' '}] Linting passes
          - [${security === 'success' ? 'x' : ' '}] No security vulnerabilities
          - [${buildTest === 'success' ? 'x' : ' '}] Build succeeds
          - [${buildTest === 'success' ? 'x' : ' '}] All tests pass
          </details>
          `;
          
          // Get existing comments
          const comments = await github.rest.issues.listComments({
            owner,
            repo,
            issue_number,
          });
          
          const existingComment = comments.data.find(
            comment => comment.user.type === 'Bot' && comment.body.includes('PR Validation Results')
          );
          
          if (existingComment) {
            // Update existing comment
            await github.rest.issues.updateComment({
              owner,
              repo,
              comment_id: existingComment.id,
              body
            });
          } else {
            // Create new comment
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number,
              body
            });
          }
          
    - name: Set PR status
      run: |
        PR_CHECKS="${{ needs.pr-checks.result }}"
        LINT_FORMAT="${{ needs.lint-and-format.result }}"
        SECURITY="${{ needs.security-scan.result }}"
        BUILD_TEST="${{ needs.build-and-test.result }}"
        
        if [[ "$PR_CHECKS" == "success" && "$LINT_FORMAT" == "success" && "$SECURITY" == "success" && "$BUILD_TEST" == "success" ]]; then
          echo "‚úÖ PR validation successful - ready for merge"
          exit 0
        else
          echo "‚ùå PR validation failed - not ready for merge"
          exit 1
        fi