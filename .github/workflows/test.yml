name: Tests

on:
  workflow_run:
    workflows: ["Build"]
    types: [completed]
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  check-build-success:
    name: Check Build Success
    runs-on: ubuntu-latest
    outputs:
      build-success: ${{ steps.check.outputs.success }}
    
    steps:
    - name: Check build workflow result
      id: check
      run: |
        if [[ "${{ github.event_name }}" == "workflow_run" ]]; then
          if [[ "${{ github.event.workflow_run.conclusion }}" == "success" ]]; then
            echo "success=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Build workflow succeeded"
          else
            echo "success=false" >> $GITHUB_OUTPUT
            echo "‚ùå Build workflow failed"
            exit 1
          fi
        else
          # For PR and manual runs, assume build success (tests will build themselves)
          echo "success=true" >> $GITHUB_OUTPUT
          echo "‚úÖ Running tests for ${{ github.event_name }} event"
        fi

  test-backend:
    name: Test .NET Backend
    runs-on: ubuntu-latest
    if: needs.check-build-success.outputs.build-success == 'true'
    needs: [check-build-success]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build solution
      run: dotnet build --configuration Release --no-restore
      
    - name: Run unit tests
      run: dotnet test --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: backend-test-results
        path: |
          **/TestResults/**
          ./coverage/**
        retention-days: 30
        
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      if: always()
      with:
        directory: ./coverage
        flags: backend
        name: backend-coverage
      env:
        token: ${{ secrets.CODECOV_TOKEN }}

  test-frontend:
    name: Test React Frontend
    runs-on: ubuntu-latest
    if: needs.check-build-success.outputs.build-success == 'true'
    needs: [check-build-success]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: 'client/package-lock.json'
        
    - name: Install dependencies
      working-directory: ./client
      run: npm ci
      
    - name: Run tests
      working-directory: ./client
      run: npm run test -- --run --coverage
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: frontend-test-results
        path: |
          client/coverage/**
        retention-days: 30
        
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      if: always()
      with:
        directory: ./client/coverage
        flags: frontend
        name: frontend-coverage
      env:
        token: ${{ secrets.CODECOV_TOKEN }}

  test-status:
    name: Test Status
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    if: always()
    
    steps:
    - name: Check test results
      run: |
        echo "Backend tests: ${{ needs.test-backend.result }}"
        echo "Frontend tests: ${{ needs.test-frontend.result }}"
        
        if [[ "${{ needs.test-backend.result }}" != "success" ]]; then
          echo "‚ùå Backend tests failed"
          exit 1
        fi
        if [[ "${{ needs.test-frontend.result }}" != "success" ]]; then
          echo "‚ùå Frontend tests failed"
          exit 1
        fi
        echo "‚úÖ All tests passed"
        
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const { owner, repo } = context.repo;
          const issue_number = context.issue.number;
          
          const backendResult = '${{ needs.test-backend.result }}';
          const frontendResult = '${{ needs.test-frontend.result }}';
          
          const backendEmoji = backendResult === 'success' ? '‚úÖ' : '‚ùå';
          const frontendEmoji = frontendResult === 'success' ? '‚úÖ' : '‚ùå';
          
          const body = `## Test Results üß™
          
          ${backendEmoji} **Backend Tests**: ${backendResult}
          ${frontendEmoji} **Frontend Tests**: ${frontendResult}
          
          ${backendResult === 'success' && frontendResult === 'success' 
            ? 'üéâ All tests passed! Ready for review.' 
            : '‚ö†Ô∏è Some tests failed. Please check the details above.'}
          `;
          
          github.rest.issues.createComment({
            owner,
            repo,
            issue_number,
            body
          });